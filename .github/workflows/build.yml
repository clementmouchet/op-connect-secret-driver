name: Build and Publish Plugin

on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ "main" ]

jobs:
  # --- 1. LINT AND BUILD GO CODE ---
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v5

      - name: 'Go Set up'
        uses: actions/setup-go@v6
        with:
          go-version: '1.25'

      - name: 'Install golangci-lint'
        uses: golangci/golangci-lint-action@v8
        with:
          version: latest

      - name: 'Go Lint'
        run: golangci-lint run

      - name: 'Go Build'
        run: go build -v ./

  # --- 2. BUILD IMAGE AND EXPORT ROOTFS ARTIFACTS ---
  build-and-upload-artifacts:
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - uses: actions/checkout@v5

      - name: 'Set environment variables'
        run: |
          echo "version=$(git describe --tags --dirty --always --abbrev=12)" >> "$GITHUB_ENV"
          echo "platform_tag=$(echo "${{ matrix.platform }}" | tr '/' '-')" >> "$GITHUB_ENV"

      - name: 'Set up QEMU'
        uses: docker/setup-qemu-action@v3

      - name: 'Set up Docker Buildx'
        uses: docker/setup-buildx-action@v3

      - name: 'Build'
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          build-args: |
            VERSION=${{ env.version }}
          push: false
          load: true
          tags: rootfsimage-${{ env.platform_tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 'Export rootfs'
        run: |
          id=$(docker create rootfsimage-${{ env.platform_tag }} true)
          # We're creating the artifact tar file directly
          docker save rootfsimage-${{ env.platform_tag }} -o plugin-rootfs-${{ env.platform_tag }}.tar
          docker rm -vf "$id"

      - name: 'Upload artifact'
        uses: actions/upload-artifact@v4
        with:
          # Artifact name is key: it's unique per platform
          name: plugin-rootfs-${{ env.platform_tag }}
          path: plugin-rootfs-${{ env.platform_tag }}.tar
          retention-days: 7
          if-no-files-found: error

  # --- 3. DOWNLOAD ARTIFACTS AND PUBLISH ---
  publish:
    runs-on: ubuntu-latest
    needs: build-and-upload-artifacts
    # Only run this job on main branch pushes or tag pushes (i.e., not on PRs)
    if: github.event_name == 'push' && github.ref_name != 'main' || github.ref_name == 'main'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    permissions:
      contents: write # Needed for release creation
      packages: write # Needed for Docker Hub push
      id-token: write # Best practice for registry interaction

    steps:
      - uses: actions/checkout@v5

      - name: 'Set environment variables'
        run: |
          echo "platform_tag=$(echo "${{ matrix.platform }}" | tr '/' '-')" >> "$GITHUB_ENV"

      - name: 'Download artifact'
        uses: actions/download-artifact@v4
        with:
          # Use the artifact name created in the build-and-upload-artifacts job
          name: plugin-rootfs-${{ env.platform_tag }}
          path: . # Download to the root of the workspace

      - name: 'Unpack Image Archive'
        run: |
          # The artifact is downloaded to the root of the workspace
          docker load -i plugin-rootfs-${{ env.platform_tag }}.tar

      - name: 'Create RootFS Directory'
        run: |
          id=$(docker create rootfsimage-${{ env.platform_tag }} true)
          mkdir -p ./plugin/rootfs/
          docker export "$id" | tar -x -C ./plugin/rootfs/
          docker rm -vf "$id"
          rm plugin-rootfs-${{ env.platform_tag }}.tar

      - name: 'Log into registry'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 'Enable experimental features'
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

      - name: 'Publish latest (main branch)'
        # Only run if pushed to the 'main' branch
        if: github.ref == 'refs/heads/main'
        run: |
          docker plugin create "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ env.platform_tag }}" plugin
          docker plugin push "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ env.platform_tag }}"          

      - name: 'Publish tagged (tag push)'
        # Only run if a tag was pushed
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          docker plugin create "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-${{ env.platform_tag }}" plugin
          docker plugin push "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-${{ env.platform_tag }}"

  # --- 4. CREATE GITHUB RELEASE (only on tag push) ---
  create-github-release:
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/') && success()
    steps:
      - name: 'Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Build Changelog'
        id: changelog_builder
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Create GitHub Release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            ${{ steps.changelog_builder.outputs.changelog }}
            
            ---
            
            ## Installation
            You can install the plugin directly from Docker Hub with the following command:
            
            Choose the version based on your platform:

            ### For `linux/amd64`
            ```shell
            docker plugin install ${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-linux-amd64 \
              --grant-all-permissions \
              --alias op-connect-secret-driver:${{ github.ref_name }} \
              --disable
            ```
            
            ### For `linux/arm64`
            ```shell
            docker plugin install ${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-linux-arm64 \
              --grant-all-permissions \
              --alias op-connect-secret-driver:${{ github.ref_name }} \
              --disable
            ```
            
            After installation, set the environment variables and enable the plugin:
            
            ```shell
            docker plugin set op-connect-secret-driver:${{ github.ref_name }} OP_CONNECT_HOST="$OP_CONNECT_HOST"
            docker plugin set op-connect-secret-driver:${{ github.ref_name }} OP_CONNECT_TOKEN="$OP_CONNECT_TOKEN"
            docker plugin enable ${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}
            ```
          draft: true
          prerelease: false