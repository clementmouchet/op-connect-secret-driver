name: Publish

on:
  workflow_run:
    workflows: [ "Build" ]
    branches: [ main ]
    types:
      - completed

jobs:
  publish:
    name: 'Publish plugin'
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]

    steps:
      - uses: actions/checkout@v5

      - name: 'Set environment variables'
        run: |
          echo "platform_tag=$(echo "${{ matrix.platform }}" | tr '/' '-')" >> "$GITHUB_ENV"

      - name: 'Download artifact'
        uses: actions/download-artifact@v5
        with:
          name: plugin-rootfs-${{ env.platform_tag }}
          path: plugin/
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}

      - name: 'Unpack Image Archive'
        run: |
          docker load -i plugin/plugin-rootfs-${{ env.platform_tag }}.tar

      - name: 'Create RootFS Directory'
        run: |
          id=$(docker create rootfsimage-${{ env.platform_tag }} true)
          mkdir -p ./plugin/rootfs/
          docker export "$id" | tar -x -C ./plugin/rootfs/
          docker rm -vf "$id"
          rm plugin/plugin-rootfs-${{ env.platform_tag }}.tar

      - name: 'Log into registry'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: 'Enable experimental features'
        run: |
          echo '{"experimental": true}' | sudo tee /etc/docker/daemon.json
          sudo service docker restart

      - name: 'Publish latest'
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          docker plugin create "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ env.platform_tag }}" plugin
          docker plugin push "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ env.platform_tag }}"          
          
      - name: 'Publish tagged'
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        run: |
          docker plugin create "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-${{ env.platform_tag }}" plugin
          docker plugin push "docker.io/${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-${{ env.platform_tag }}"

  create-github-release:
    runs-on: ubuntu-latest
    needs: publish
    permissions:
      contents: write # Required to create a release
    if: ${{ startsWith(github.ref, 'refs/tags/') && success() }}
    steps:

      - name: 'Checkout repository'
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: 'Build Changelog'
        id: changelog_builder
        uses: mikepenz/release-changelog-builder-action@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 'Create GitHub Release'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: |
            ## What's Changed
            ${{ steps.changelog_builder.outputs.changelog }}
            
            ---
            
            ## Installation
            You can install the plugin directly from Docker Hub with the following command:
            
            Choose the version based on your platform:

            ### For `linux/amd64`
            ```bash
            docker plugin install ${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-linux-amd64 \
              --grant-all-permissions \
              --alias op-connect-secret-driver \
              --disable
            ```
            
            ### For `linux/arm64`
            ```bash
            docker plugin install ${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}-linux-arm64 \
              --grant-all-permissions \
              --alias op-connect-secret-driver \
              --disable
            ```
            
            After installation, remember to enable the plugin:
            
            ```shell
            docker plugin enable ${{ secrets.DOCKER_USERNAME }}/op-connect-secret-driver:${{ github.ref_name }}
            ```
          draft: false
          prerelease: false